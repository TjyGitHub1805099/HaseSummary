/**
@defgroup flexio_uart_drv FlexIO UART Driver
@ingroup flexio
@brief UART communication over FlexIO module (FLEXIO_UART)
<p>
  The FLEXIO_UART Driver allows UART communication using the FlexIO module in the S32144K processor.
</p>
  ## Features ##
   - Interrupt, DMA or polling mode
   - Provides blocking and non-blocking transmit and receive functions
   - Configurable baud rate and number of bits
   - Single stop bit only
   - Parity bit not supported

  ## Functionality ##

  ### Initialization ###
<p>
  Before using any Flexio driver the device must first be initialized using function FLEXIO_DRV_InitDevice.
  Then the FLEXIO_UART Driver must be initialized, using function FLEXIO_UART_DRV_Init().
  It is possible to use more driver instances on the same FlexIO device,
  as long as sufficient resources are available. Different driver instances on the same FlexIO device
  can function independently of each other. When it is no longer needed, the driver can be de-initialized, using
  FLEXIO_UART_DRV_Deinit(). This will release the hardware resources, allowing other driver instances to be initialized.
</p>

  ### Choosing transmit/receive mode ###
<p>
  To initialize the UART driver in transmit / receive mode the <tt>direction</tt> field of the configuration
  structure must be set to <tt>FLEXIO_UART_DIRECTION_TX</tt> / <tt>FLEXIO_UART_DIRECTION_RX</tt> when
  calling FLEXIO_UART_DRV_Init(). Once configured for one direction
  the driver must be used only for the chosen direction until it is de-initialized. One driver instance can only
  work in one direction at a time, but more driver instances can be created on the same device, up to the number of
  shifters present on the device (for example on S32K144 up to 4 driver instances can run in parallel on one device).
</p>

  ### Setting the baud rate and bit count ###
<p>
  The baud rate and bit count are provided at initialization time through the master configuration structure,
  but they can be changed at runtime by using function FLEXIO_UART_DRV_SetConfig().
  Note that due to module limitation not any baud rate can be achieved. The driver will set a baud rate as
  close as possible to the requested baud rate, but there may still be substantial differences, for example
  if requesting a high baud rate while using a low-frequency FlexIO clock. The
  application should call FLEXIO_UART_DRV_GetBaudRate() to check what baud rate was actually set.
</p>

  ### Transmitting / Receiving ###
<p>
  To send or receive data to/from the currently configured slave address, use functions FLEXIO_UART_DRV_SendData()
  or FLEXIO_UART_DRV_ReceiveData() (or their blocking counterparts). Continuous send/receive can be realized
  by registering a user callback function. When the driver completes the transmission or reception of the current buffer,
  it will invoke the user callback with an appropriate event. The callback function can the use
  FLEXIO_UART_DRV_SetTxBuffer() orFLEXIO_UART_DRV_SetRxBuffer() to provide a new buffer.
</p>
<p>
  Blocking operations will return only when the transfer is completed, either successfully or with error.
  Non-blocking operations will initiate the transfer and return \ref STATUS_SUCCESS, but the module is still
  busy with the transfer and another transfer can't be initiated until the current transfer is complete. The
  application will be notified through the user callback when the transfer completes, or it can check the
  status of the current transfer by calling FLEXIO_UART_DRV_GetStatus(). If the transfer is still ongoing this
  function will return  \ref STATUS_BUSY. If the transfer is completed, the function will return
  either \ref STATUS_SUCCESS or an error code, depending on the outcome of the last transfer.
</p>
<p>
  The driver supports interrupt, DMA and polling mode. In polling mode the function FLEXIO_UART_DRV_GetStatus()
  ensures the progress of the transfer by checking and handling transmit and receive events reported by the
  FlexIO module. The application should ensure that this function is called often enough (at least once per
  transferred byte) to avoid Tx underflows or Rx overflows. In DMA mode the DMA channel that will be used by the
  driver is received through the configuration structure. The channel must be initialized by the
  application before the flexio_uart driver is initialized. The flexio_uart driver will only set the DMA request source.
</p>

  ## Important Notes ##
<p>
  - Before using the FLEXIO_UART Driver the FlexIO clock must be configured. Refer
  to Clock Manager for clock configuration.
  - Before using the FLEXIO_UART Driver the pins must be routed to the FlexIO module. Refer to PINS Driver for pin
  routing configuration. Note that any of the available FlexIO pins can be used for the UART TX / RX line
  (configurable at initialization time). If more than one driver instance is used on the same Flexio
  module, it is the responsibility of the application to ensure there are no conflicts between pins.
  - The driver enables the interrupts for the corresponding FlexIO module, but any interrupt priority
  setting must be done by the application.
  - Timeout feature for blocking transfers does not work in polling mode.
  - This driver needs one shifter and one timer for its operation. Initialization will fail if there are
  not enough shifters and timers available on the FlexIO device.
  - This driver needs one DMA channel for its operation when it is initialized in DMA mode. The DMA channels must be
  initialized by the application before initializing the driver. Refer to EDMA driver for DMA channels initialization.
  - If the application uses an RTOS, this driver uses a semaphore for blocking transfers. Initialization will
  fail if the semaphore cannot be created. If the driver uses polling mode no semaphore is used.
  - If the application uses an RTOS, the FlexIO drivers use a mutex for channel allocation. Only one mutex per device
  is needed, not per driver instance. Device initialization will fail if the mutex cannot be created.
</p>
*/
