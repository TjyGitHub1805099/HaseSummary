/**
@defgroup lpuart Low Power Universal Asynchronous Receiver-Transmitter (LPUART)
@brief The S32 SDK provides a Peripheral Driver for the Low Power Universal Asynchronous
Receiver-Transmitter (LPUART) module of S32 SDK devices.
@n
The LPUART module is used for serial communication, supporting LIN master and slave operation. These sections
describe the S32 SDK software modules API that can be used for initializing and configuring the module, as well
as initiating serial communications using the interrupt-based method.

*/

/**
@defgroup lpuart_driver LPUART Driver
@ingroup lpuart
@brief This module covers the functionality of the Low Power Universal Asynchronous Receiver-Transmitter (LPUART)
peripheral driver.
<p>
  The LPUART driver implements serial communication using the LPUART module in the S32144K processor.
</p>
  ## Features ##
   - Interrupt based and polling communication
   - Provides blocking and non-blocking transmit and receive functions
   - Configurable baud rate
   - 8/9/10 bits per char

  ## Functionality ##
<p>
  In order to use the LPUART driver it must be first initialized, using LPUART_DRV_Init() function.
  Once initialized, it cannot be initialized again for the same LPUART module instance until it is
  de-initialized, using LPUART_DRV_Deinit(). The initialization function does the following operations:
    - sets the baud rate
    - sets parity/bit count/stop bits count
    - initializes the state structure for the current instance
    - enables receiver/transmitter for the current instance
  Different LPUART module instances can function independently of each other.
</p>

  ### Interrupt-based communication ###
<p>
  After initialization, a serial communication can be triggered by calling LPUART_DRV_SendData function; this
  will save the reference of the data buffer received as parameter in the internal tx buffer pointer, then copy
  the first byte to the data register. The hw tranceiver then automatically shifts the data and triggers a
  'Transmit buffer empty' interrupt when all bits are shifted. The drivers interrupt handler takes care of
  transmitting the next byte in the buffer, by increasing the data pointer and decreasing the data size. The same
  sequence of operations is executed until all bytes in the tx buffer have been transmitted.
</p>
<p>
  Similarly, data reception is triggered by calling LPUART_DRV_ReceiveData function, passing the rx buffer as
  parameter. When the tranceiver copies the received bits in the data register, the 'Receive buffer full' interrupt
  is triggered; the driver irq handler clears the flag by reading the received byte, saves it in the rx buffer,
  then increments the data pointer and decrements the data size. This is repeated untill all bytes are received.
</p>
<p>
  The workflow applies to send/receive operations using blocking method (triggered by LPUART_DRV_SendDataBlocking
  and LPUART_DRV_ReceiveDataBlocking), with the single difference that the send/receive function will not return
  until the send/receive operation is complete (all bytes are successfully transferred or a timeout occured). The
  timeout for the blocking method is passed as parameter by the user.
</p>
<p>
  If a user callback is installed for rx/tx, the callback has to take care of data handling and aborting the
  transfer when complete; the driver irq handler does not manipulate the buffers in this case. A target usecase
  here would be receiving an indefinite number of bytes; the user rx callback will be called by the driver each
  time a character is received and the application needs to call LPUART_DRV_AbortReceivingData in order to stop
  the reception.
</p>
  ### DMA-based communication ###
<p>
  In DMA operation, both blocking and non-blocking transmission methods confiure a DMA channel to copy data
  from the buffer to the data register (for tx), or viceversa (for rx). The driver assumes the DMA channel is
  already allocated and the proper requests are routed to it via DMAMUX. After configuring the DMA channel, the
  driver enables DMA requests for rx/tx, then the DMA engine takes care of moving data to/from the data buffer.
  In this scenario, the callback is only called when the full transmission is done, that is when the DMA channel
  finishes the number of loops configured in the transfer descriptor.
</p>
  ## Important Notes ##
<p>
  - Before using the LPUART driver the module clock must be configured
  - The driver enables the interrupts for the corresponding LPUART module, but any interrupt priority
    must be done by the application
  - The board specific configurations must be done prior to driver calls; the driver has no influence on the
    functionality of the rx/tx pins - they must be configured by application
  - DMA module has to be initialized prior to LPUART usage in DMA mode; also, DMA channels need to be allocated
    for LPUART usage by the application (the driver only takes care of configuring the DMA channels received in
    the configuration structure)
  - for 9/10 bits characters, the application must provide the appropriate buffers; the size of the tx/rx buffers
    in this scenario needs to be an even number, as the transferred characters will be split in two bytes (bit 8
    for 9-bits chars and bits 8 & 9 for 10-bits chars will be stored in the subsequent byte). 9/10 bits chars are
    only supported in interrupt-based and polling communications
</p>
*/
