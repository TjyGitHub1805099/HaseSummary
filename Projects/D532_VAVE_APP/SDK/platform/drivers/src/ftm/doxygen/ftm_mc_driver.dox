/*!
   @defgroup ftm_mc_driver FlexTimer Module Counter Driver (FTM_MC)
   @ingroup ftm
   @details
   @brief FlexTimer Module Counter Peripheral Driver.

   ## Hardware background ##
   The FTM of the S32K144 is based on a 16 bits counter and supports: input capture, output compare, PWM and some instances
   include quadrature decoder.

   ## How to use FTM driver in your application ##
   For all operation modes (without Quadrature Decoder mode) the user need to configure ftm_user_config_t. This structure will be used for initialization
   (FTM_DRV_Init). The next functions used are specific for each operation mode.

   ### Counter mode ###
   For this mode the user needs to configure parameters like: counter mode (up-counting or up-down counting), maximum counter value, initial counter value.
   All this information is included in #ftm_timer_param_t.

   Example:
    @code
    /* The state structure of instance in the input capture mode */
    ftm_state_t stateTimer;
    #define FTM_TIMER_INSTANCE        3UL
    /* Timer mode configuration for Timer */
    ftm_timer_param_t Timer_TimerConfig =
    {
        FTM_MODE_UP_TIMER,              /* Counter mode */
        0U,                             /* Initial counter value */
        0x8000U                         /* Final counter value */
    };

    /* Global configuration of Timer*/
    ftm_user_config_t  Timer_InitConfig =
    {
        {
            false,                      /* Software trigger state */
            false,                      /* Hardware trigger 1 state */
            false,                      /* Hardware trigger 2 state */
            false,                      /* Hardware trigger 3 state */
            false,                      /* Maximum loading point state */
            false,                      /* Min loading point state */
            FTM_SYSTEM_CLOCK,           /* Update mode for INVCTRL register */
            FTM_SYSTEM_CLOCK,           /* Update mode for SWOCTRL register */
            FTM_SYSTEM_CLOCK,           /* Update mode for OUTMASK register */
            FTM_SYSTEM_CLOCK,           /* Update mode for CNTIN register */
            false,                      /* Auto clear trigger state for hardware trigger */
            FTM_UPDATE_NOW,             /* Select synchronization method */
        },
        FTM_MODE_UP_TIMER,              /* Mode of operation for FTM */
        FTM_CLOCK_DIVID_BY_2,           /* FTM clock pre-scaler */
        FTM_CLOCK_SOURCE_SYSTEMCLK,     /* FTM clock source */
        FTM_BDM_MODE_11,                /* FTM debug mode */
        false,                          /* Interrupt state */
        false                           /* Initialization trigger */
    };
    FTM_DRV_Init(FTM_TIMER_INSTANCE,&Timer_InitConfig, &stateTimer);
    FTM_DRV_InitCounter(FTM_TIMER_INSTANCE, &Timer_TimerConfig);
    FTM_DRV_CounterStart(FTM_TIMER_INSTANCE);
    @endcode

@}*/
