/*!
   @defgroup flexcan Controller Area Network with Flexible Data Rate (FlexCAN)
   The S32 SDK provides a Peripheral Driver for the FlexCAN module of S32 SDK devices.

   ## Hardware background ##

   The FlexCAN module is a communication controller implementing the CAN protocol
   according to the ISO 11898-1 standard and CAN 2.0 B protocol specifications.
   The FlexCAN module is a full implementation of the CAN protocol specification, the
   CAN with Flexible Data rate (CAN FD) protocol and the CAN 2.0 version B protocol,
   which supports both standard and extended message frames and long payloads up to 64
   bytes transferred at faster rates up to 8 Mbps. The message buffers are stored in an
   embedded RAM dedicated to the FlexCAN module.

   The FlexCAN module includes these distinctive features:
   - Full implementation of the CAN with Flexible Data Rate (CAN FD) protocol
   specification and CAN protocol specification, Version 2.0 B
      - Standard data frames
      - Extended data frames
      - Zero to sixty four bytes data length
      - Programmable bit rate (see the chip-specific FlexCAN information for the
      specific maximum rate configuration)
      - Content-related addressing
   - Compliant with the ISO 11898-1 standard
   - Flexible mailboxes configurable to store 0 to 8, 16, 32 or 64 bytes data length
   - Each mailbox configurable as receive or transmit, all supporting standard and
   extended messages
   - Individual Rx Mask registers per mailbox
   - Full-featured Rx FIFO with storage capacity for up to six frames and automatic internal
   pointer handling with DMA support
   - Transmission abort capability
   - Flexible message buffers (MBs) configurable as Rx or Tx (see the \ref FEATURE_CAN_MAX_MB_NUM
   define for the specific maximum number of message buffers configurable on each platform)
   - Programmable clock source to the CAN Protocol Interface, either peripheral clock or
   oscillator clock (this feature might differ depending on the platform, see \ref FEATURE_CAN_HAS_PE_CLKSRC_SELECT
   define for the availability of this feature on each platform)
   - RAM not used by reception or transmission structures can be used as general purpose
   RAM space
   - Listen-Only mode capability
   - Programmable Loop-Back mode supporting self-test operation
   - Maskable interrupts
   - Short latency time due to an arbitration scheme for high-priority messages
   - Low power modes or matching with received frames - Pretended Networking (this feature might
   not be available on some platforms, see \ref FEATURE_CAN_HAS_PRETENDED_NETWORKING define
   for the availability of this feature on each platform)
   - Transceiver Delay Compensation feature when transmitting CAN FD messages at faster data rates
   - Remote request frames may be handled automatically or by software
   - CAN bit time settings and configuration bits can only be written in Freeze mode
   - SYNCH bit available in Error in Status 1 register to inform that the module is synchronous
   with CAN bus
   - CRC status for transmitted message
   - Rx FIFO Global Mask register
   - Selectable priority between mailboxes and Rx FIFO during matching process
   - Powerful Rx FIFO ID filtering, capable of matching incoming IDs against either 128
   extended, 256 standard, or 512 partial (8 bit) IDs, with up to 32 individual masking
   capability
   - 100% backward compatibility with previous FlexCAN version
   - Supports Pretended Networking functionality in low power: Stop mode (this feature might
   not be available on some platforms, see chip-specific FlexCAN information for details)
   - Supports detection and correction of errors in memory read accesses. Errors in one
   bit can be corrected and errors in 2 bits can be detected but not corrected (this feature might
   not be available on some platforms, see chip-specific FlexCAN information for details)
   - Supports Self Wake Up feature when FlexCAN is in a low power mode: Stop mode (this feature might
   not be available on some platforms, see \ref FEATURE_CAN_HAS_SELF_WAKE_UP define
   for the availability of this feature on each platform)

   @addtogroup flexcan_driver
   @ingroup flexcan

   ## How to use the FlexCAN driver in your application ##
   In order to be able to use the FlexCAN in your application, the first thing to do is
   initializing it with the desired configuration. This is done by calling the <b>FLEXCAN_DRV_Init</b>
   function. One of the arguments passed to this function is the configuration which will be
   used for the FlexCAN module, specified by the <b>flexcan_user_config_t</b> structure.

   The <b>flexcan_user_config_t</b> structure allows you to configure the following:
      - the number of message buffers needed;
      - the number of Rx FIFO ID filters needed;
      - enable/disable the Rx FIFO feature;
      - the operation mode, which can be one of the following:
         - normal mode;
         - listen-only mode;
         - loopback mode;
         - freeze mode;
         - disable mode;
      - the payload size of the message buffers:
         - 8 bytes;
         - 16 bytes (only available with the FD feature enabled);
         - 32 bytes (only available with the FD feature enabled);
         - 64 bytes (only available with the FD feature enabled);
      - enable/disable the Flexible Data-rate feature;
      - the clock source of the CAN Protocol Engine (PE);
      - the bitrate used for standard frames or for the arbitration phase of FD frames;
      - the bitrate used for the data phase of FD frames;
      - the Rx transfer type, which can be one of the following:
         - using interrupts;
         - using DMA;
      - the DMA channel number to be used for DMA transfers;

   The bitrate is represented by a <b>flexcan_time_segment_t</b> structure, with the following fields:
      - propagation segment;
      - phase segment 1;
      - phase segment 2;
      - clock prescaler division factor;
      - resync jump width.

   Details about these fields can be found in the reference manual.

   In order to use a mailbox for transmission/reception, it should be initialized using either
   <b>FLEXCAN_DRV_ConfigRxMb</b>, <b>FLEXCAN_DRV_ConfigRxFifo</b> or <b>FLEXCAN_DRV_ConfigTxMb</b>.

   After having the mailbox configured, you can start sending/receiving using it by calling one
   of the following functions:
      - FLEXCAN_DRV_Send;
      - FLEXCAN_DRV_SendBlocking;
      - FLEXCAN_DRV_Receive;
      - FLEXCAN_DRV_ReceiveBlocking;
      - FLEXCAN_DRV_RxFifo;
      - FLEXCAN_DRV_RxFifoBlocking.

   A default FlexCAN configuration can be accesed by calling the <b>FLEXCAN_DRV_GetDefaultConfig</b>
   function. This function takes as argument a <b>flexcan_user_config_t</b> structure and fills it
   according to the following settings:
      - 16 message buffers
	  - flexible data rate disabled
	  - Rx FIFO disabled
	  - normal operation mode
	  - 8 byte payload size
	  - Protocol Engine clock = Oscillator clock
	  - bitrate of 500 Kbit/s (computed for PE clock = 8 MHz with sample point = 87.5)

  ## Important Notes ##
<p>
  - The FlexCAN driver does not handle clock setup or any kind of pin configuration. This is handled
    by the Clock Manager and PinSettings modules, respectively. The driver assumes that correct clock
	configurations have been made, so it is the user's responsibility to set up clocking and pin
	configurations correctly.
  - For some platforms, the clock source of the CAN Protocol Engine (PE) is not configurable from the
    FlexCAN module. If this feature is not supported, the <i>pe_clock field</i> from the FlexCAN
	configuration structure is not present.
  - DMA module has to be initialized prior to FlexCAN Rx FIFO usage in DMA mode; also, the DMA channel
    needs to be allocated by the application (the driver only takes care of configuring the DMA
    channel received in the configuration structure).
</p>


   #### Example: ####
@code

    #define INST_CANCOM1 (0U)
	#define RX_MAILBOX   (1U)
	#define MSG_ID       (2U)

    flexcan_state_t canCom1_State;

    const flexcan_user_config_t canCom1_InitConfig0 = {
        .fd_enable = true,
        .pe_clock = FLEXCAN_CLK_SOURCE_SOSCDIV2,
        .max_num_mb = 16,
        .num_id_filters = FLEXCAN_RX_FIFO_ID_FILTERS_8,
        .is_rx_fifo_needed = false,
        .flexcanMode = FLEXCAN_NORMAL_MODE,
        .payload = FLEXCAN_PAYLOAD_SIZE_8,
        .bitrate = {
            .propSeg = 7,
            .phaseSeg1 = 4,
            .phaseSeg2 = 1,
            .preDivider = 0,
            .rJumpwidth = 1
        },
        .bitrate_cbt = {
            .propSeg = 11,
            .phaseSeg1 = 1,
            .phaseSeg2 = 1,
            .preDivider = 0,
            .rJumpwidth = 1
        },
        .transfer_type = FLEXCAN_RXFIFO_USING_INTERRUPTS,
        .rxFifoDMAChannel = 0U
    };

    /* Initialize FlexCAN driver */
    FLEXCAN_DRV_Init(INST_CANCOM1, &canCom1_State, &canCom1_InitConfig0);

    /* Set information about the data to be received */
    flexcan_data_info_t dataInfo =
    {
        .data_length = 1U,
        .msg_id_type = FLEXCAN_MSG_ID_STD,
        .enable_brs  = true,
        .fd_enable   = true,
        .fd_padding  = 0U
    };

    /* Configure Rx message buffer with index 1 to receive frames with ID 2 */
    FLEXCAN_DRV_ConfigRxMb(INST_CANCOM1, RX_MAILBOX, &dataInfo, MSG_ID);

    /* Receive a frame in the recvBuff variable */
    flexcan_msgbuff_t recvBuff;

    FLEXCAN_DRV_Receive(INST_CANCOM1, RX_MAILBOX, &recvBuff);
    /* Wait for the message to be received */
    while (FLEXCAN_DRV_GetTransferStatus(INST_CANCOM1, RX_MAILBOX) == STATUS_BUSY);

    /* De-initialize driver */
    FLEXCAN_DRV_Deinit(INST_CANCOM1);

@endcode

@}*/
