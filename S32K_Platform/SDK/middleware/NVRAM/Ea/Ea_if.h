/******************************************************************************
**          Copyright (c) by HASE (Chengdu) Technology Center.
**
**          CONFIDENTIAL and PROPRIETARY
**          UNPUBLISHED SOURCE CODE
**          Disclosure, use or reproduction without authorization of
**          HASE (Chengdu) Technology Center is prohibited.
*******************************************************************************
**
**          File  : Ea_cfg.h
**          Modifly:brown
**			author: weltry wang
**          Date  : 2017-06-20
**          
**          History:
**          1. Date:2018-02-26
**             Author:weltry wang
**             Modification:
**
******************************************************************************/





#ifndef Ea_IF_H
#define Ea_IF_H
#ifdef __cplusplus
}
#endif

#include "Ea.h"


/*** Start , DO NOT MODIFY THIS TEXT!!! ***/
/*** Don't write any code pass this line, or it will be deleted during code generation. ***/
/*** ***********************The below lines is generated by tool*********************** ***/
//#define EA_BLOCK_NUM_ALL_DF          3U

//extern const uint16 EA_BLOCK_NUM_ALL; 

/*** The above lines is generated by tool ***/
/*** Generation data:2018-05-16 10:03 ***/
/*** End , DO NOT MODIFY THIS TEXT!!! ***/



/*====================[F U N C  D E C L A R A T I O N]====================*/

/*************************************************************************/
/*
 * Function Name       Ea_MainFunction()
 * Brief               Ea main funcation
 * Sync/Async          Synchronous
 * Reentrancy          non-Reentrant
 * Param-Name[in]      None
 * Param-Name[out]     None
 * Param-Name[in/out]  None
 * Return              None
 * PreCondition        None
 */
/*************************************************************************/
void Ea_MainFunction();

/*************************************************************************/
/*
 * Function Name       Initializes the EEPROM abstraction module.
 * Brief               Reads Length bytes of block Blocknumber at offset BlockOffset into the buffer DataBufferPtr.
 * Sync/Async          Synchronous
 * Reentrancy          Non-Reentrant
 * Param-Name[in]      None
 * Param-Name[out]     None
 * Param-Name[in/out]  None
 * Return              E_OK: Succeed.
 *                     E_NOT_OK: Failed.
 * PreCondition        Driver has initialized
 */
/*************************************************************************/
Std_ReturnType Ea_Init();

#if(STD_ON == EaSetModeSupported)
void Ea_SetMode(MemIf_ModeType Mode);
#endif

/*************************************************************************/
/*
 * Function Name       Ea_Write(uint16 BlockNumber, uint8* DataBufferPtr)
 * Brief               rites the contents of the DataBufferPtr to the block BlockNumber. 
 * Sync/Async          Synchronous
 * Reentrancy          Non-Reentrant
 * Param-Name[in]      BlockNumber: Number of logical block, also denoting start address of that block in EEPROM.
 *                     DataBufferPtr: Pointer to data buffer
 * Param-Name[out]     None
 * Param-Name[in/out]  None
 * Return              E_OK: The requested job has been accepted by the module.
 *                     E_NOT_OK: The requested job has not been accepted by the EA module.
 * PreCondition        Driver has initialized
 */
/*************************************************************************/
Std_ReturnType      Ea_Write(uint16 BlockNumber, uint8* DataBufferPtr);

/*************************************************************************/
/*
 * Function Name       Ea_Read(uint16 BlockNumber,uint16 BlockOffset,uint8* DataBufferPtr,uint16 Length)
 * Brief               Reads Length bytes of block Blocknumber at offset BlockOffset into the buffer DataBufferPtr.
 * Sync/Async          Synchronous
 * Reentrancy          Non-Reentrant
 * Param-Name[in]      BlockNumber: Number of logical block, also denoting start address of that block in EEPROM.
 *                     BlockOffset: Read address offset inside the block
 *                     Length:      Number of bytes to read
 * Param-Name[out]     DataBufferPtr: Pointer to data buffer
 * Param-Name[in/out]  None
 * Return              E_OK: The requested job has been accepted by the module.
 *                     E_NOT_OK: The requested job has not been accepted by the EA module.
 * PreCondition        Driver has initialized
 */
/*************************************************************************/
Std_ReturnType      Ea_Read(uint16 BlockNumber,uint16 BlockOffset,uint8* DataBufferPtr,uint16 Length);

/*************************************************************************/
/*
 * Function Name       Ea_Cancel()
 * Brief               Cancels the ongoing asynchronous operation.  
 * Sync/Async          Synchronous
 * Reentrancy          Non-Reentrant
 * Param-Name[in]      None
 * Param-Name[out]     None
 * Param-Name[in/out]  None
 * Return              None
 * PreCondition        None
 */
/*************************************************************************/
void                Ea_Cancel();

/*************************************************************************/
/*
 * Function Name       Ea_GetStatus()
 * Brief               Service to return the Status. 
 * Sync/Async          Synchronous
 * Reentrancy          Reentrant
 * Param-Name[in]      None
 * Param-Name[out]     None
 * Param-Name[in/out]  None
 * Return              None
 * PreCondition        None
 */
/*************************************************************************/
MemIf_StatusType    Ea_GetStatus();

/*************************************************************************/
/*
 * Function Name       Ea_GetJobResult()
 * Brief               Service to return the Status. 
 * Sync/Async          Synchronous
 * Reentrancy          Reentrant
 * Param-Name[in]      None
 * Param-Name[out]     None
 * Param-Name[in/out]  None
 * Return              MEMIF_JOB_OK: The last job has been finished successfully. 
 *                     MEMIF_JOB_PENDING: The last job is waiting for execution or currently being executed. 
 *                     MEMIF_JOB_CANCELED: The last job has been canceled (which means it failed). 
 *                     MEMIF_JOB_FAILED: The last job was not finished successfully (it failed). 
 *                     MEMIF_BLOCK_INCONSISTENT: The requested block is inconsistent, it may contain corrupted data.
 * PreCondition        None
 */
/*************************************************************************/
MemIf_JobResultType Ea_GetJobResult();

/*************************************************************************/
/*
 * Function Name       Ea_InvalidateBlock(uint16 BlockNumber) 
 * Brief               Invalidates the block BlockNumber.
 * Sync/Async          Synchronous
 * Reentrancy          Non-Reentrant
 * Param-Name[in]      BlockNumber: Number of logical block, also denoting start address of that block in EEPROM.
 * Param-Name[out]     None
 * Param-Name[in/out]  None
 * Return              E_OK: The requested job has been accepted by the module. 
 *                     E_NOT_OK - only if DET is enabled: The requested job has not been accepted by the EA module.
 * PreCondition        None
 */
/*************************************************************************/
Std_ReturnType      Ea_InvalidateBlock(uint16 BlockNumber); 

/*************************************************************************/
/*
 * Function Name       Ea_EraseImmediateBlocks(uint16 BlockNumber) 
 * Brief               Erases the block BlockNumber.
 * Sync/Async          Synchronous
 * Reentrancy          Non-Reentrant
 * Param-Name[in]      BlockNumber: Number of logical block, also denoting start address of that block in EEPROM.
 * Param-Name[out]     None
 * Param-Name[in/out]  None
 * Return              E_OK: The requested job has been accepted by the module. 
 *                     E_NOT_OK - only if DET is enabled: The requested job has not been accepted by the EA module.
 * PreCondition        None
 */
/*************************************************************************/
Std_ReturnType      Ea_EraseImmediateBlock(uint16 BlockNumber);

/*************************************************************************/
/*
 * Function Name       Ea_SetWriteBalance(uint8 State)
 * Brief               Enabled/Disabled balance write 
 * Sync/Async          Synchronous
 * Reentrancy          Non-Reentrant
 * Param-Name[in]      State:STD_ON-Enabled STD_OFF-Disabled
 * Param-Name[out]     None
 * Param-Name[in/out]  None
 * Return              None
 * PreCondition        None
 */
/*************************************************************************/
void  Ea_SetWriteBalance(uint8 State);

/*************************************************************************/
/*
 * Function Name       Ea_ResetDevice()
 * Brief               Reset EEPROM Block1,it will reset Nvm when reboot
 * Sync/Async          Synchronous
 * Reentrancy          Non-Reentrant
 * Param-Name[in]      None
 * Param-Name[out]     None
 * Param-Name[in/out]  None
 * Return              E_OK     : Succeed. 
 *                     E_NOT_OK : write data to EEPROM fialed
 * PreCondition        None
 */
/*************************************************************************/
Std_ReturnType      Ea_ResetDevice();




#ifdef __cplusplus
}
#endif
#endif

