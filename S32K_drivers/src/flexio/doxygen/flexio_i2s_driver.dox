/**
@defgroup flexio_i2s_drv FlexIO I2S Driver
@ingroup flexio
@brief I2S communication over FlexIO module (FLEXIO_I2S)
<p>
  The FLEXIO_I2S Driver allows communication on an I2S bus using the FlexIO module in the S32144K processor.
</p>
  ## Features ##
   - Master or slave operation
   - Interrupt, DMA or polling mode
   - Provides blocking and non-blocking transmit and receive functions
   - Configurable baud rate and bit count

  ## Functionality ##
<p>
  Before using any Flexio driver the device must first be initialized using function FLEXIO_DRV_InitDevice.
  Then the FLEXIO_I2S Driver must be initialized, using functions FLEXIO_I2S_DRV_MasterInit() or
  FLEXIO_I2S_DRV_SlaveInit(). It is possible to use more driver instances on the same FlexIO device,
  as long as sufficient resources are available. Different driver instances on the same FlexIO device
  can function independently of each other. When it is no longer needed, the driver can be de-initialized, using
  FLEXIO_I2S_DRV_MasterDeinit() or FLEXIO_I2S_DRV_SlaveDeinit(). This will release the hardware resources,
  allowing other driver instances to be initialized.
</p>

  ### Master Mode ###
<p>
  Master Mode provides functions for transmitting or receiving data to/from any I2S slave. The number of bits
  per word and the baud rate are provided at initialization time through the master configuration structure,
  but they can be changed at runtime by using FLEXIO_I2S_DRV_MasterSetConfig().
  Note that due to module limitation not any baud rate can be achieved. The driver will set a baud rate as
  close as possible to the requested baud rate, but there may still be substantial differences, for example
  if requesting a high baud rate while using a low-frequency FlexIO clock. The
  application should call FLEXIO_I2S_DRV_MasterGetBaudRate() to check what baud rate was actually set.
</p>
<p>
  To send or receive data to/from the currently configured slave address, use functions FLEXIO_I2S_DRV_MasterSendData()
  or FLEXIO_I2S_DRV_MasterReceiveData() (or their blocking counterparts). The driver is not full-duplex, only one
  direction (send or receive) can be used at one time. It is possible to configure both Rx and Tx pin to use the
  same Flexio pin.
</p>
<p>
  Continuous send/receive can be realized
  by registering a user callback function. When the driver completes the transmission or reception of the current
  buffer, it will invoke the user callback with an appropriate event. The callback function can the use
  FLEXIO_I2S_DRV_MasterSetTxBuffer() or FLEXIO_I2S_DRV_MasterSetRxBuffer() to provide a new buffer.
</p>
<p>
  Blocking operations will return only when the transfer is completed, either successfully or with error.
  Non-blocking operations will initiate the transfer and return \ref STATUS_SUCCESS, but the module is still
  busy with the transfer and another transfer can't be initiated until the current transfer is complete. The
  application will be notified through the user callback when the transfer completes, or it can check the status
  of the current transfer by calling FLEXIO_I2S_DRV_MasterGetStatus(). If the transfer is still ongoing this
  function will return \ref STATUS_BUSY. If the transfer is completed, the function will return
  either \ref STATUS_SUCCESS or an error code, depending on the outcome of the last transfer.
</p>
<p>
  The driver supports interrupt, DMA and polling mode. In polling mode the function FLEXIO_I2S_DRV_MasterGetStatus()
  ensures the progress of the transfer by checking and handling transmit and receive events reported by the
  FlexIO module. The application should ensure that this function is called often enough (at least once per
  transferred byte) to avoid Tx underflows or Rx overflows. In DMA mode the DMA channels that will be used by the
  driver are received through the configuration structure. The channels must be initialized by the
  application before the flexio_i2s driver is initialized. The flexio_i2s driver will only set the DMA request source.
</p>

  ### Slave Mode ###
<p>
  Slave Mode is very similar to master mode, the main difference being that the FLEXIO_I2S_DRV_SlaveInit() function
  initializes the FlexIO module to use the clock signal received from the master instead of generating it. Consequently,
  there is no baud rate setting in slave mode. Other than that, the slave mode offers a similar interface
  to the master mode. FLEXIO_I2S_DRV_MasterSendData() or FLEXIO_I2S_DRV_MasterReceiveData()
  (or their blocking counterparts) can be used to initiate transfers, and FLEXIO_I2S_DRV_SlaveGetStatus()
  is used to check the status of the transfer and advance the transfer in polling mode. All other specifications from
  the Master Mode description apply for Slave Mode too.
</p>

  ## Important Notes ##
<p>
  - Before using the FLEXIO_I2S Driver the FlexIO clock must be configured. Refer
  to Clock Manager for clock configuration.
  - Before using the FLEXIO_I2S Driver the pins must be routed to the FlexIO module. Refer to PINS Driver for pin
  routing configuration. Note that any of the available FlexIO pins can be used for any of the TX, RX, SCK and
  WS signals (configurable at initialization time). If more than one driver instance is used on the same Flexio
  module, it is the responsibility of the application to ensure there are no conflicts between pins.
  - The driver enables the interrupts for the corresponding FlexIO module, but any interrupt priority
  setting must be done by the application.
  - Timeout feature for blocking transfers does not work in polling mode.
  - This driver needs two shifters and two timers for its operation. Initialization will fail if there are
  not enough shifters and timers available on the FlexIO device.
  - This driver needs two DMA channels for its operation when it is initialized in DMA mode. The DMA channels must be
  initialized by the application before initializing the driver. Refer to EDMA driver for DMA channels initialization.
  - If the application uses an RTOS, this driver uses a semaphore for blocking transfers. Initialization will
  fail if the semaphore cannot be created. If the driver uses polling mode no semaphore is used.
  - If the application uses an RTOS, the FlexIO drivers use a mutex for channel allocation. Only one mutex per device
  is needed, not per driver instance. Device initialization will fail if the mutex cannot be created.
</p>
*/
