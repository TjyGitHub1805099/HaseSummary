/**************************
author: liqi@hangsheng.com.cn
version: v1.0.0
**************************/


#ifndef _UPDATE_SYS_H
#define _UPDATE_SYS_H
#include"Std_Types.h"
#include "Task_M_IpcApp_Cfg.h"
#include "SpiIpc_cfg.h"
#include "Task_IpcApp_Cfg.h"
#include "diagAppIpc_cbk.h"

#define UPDATE_APP_FLAG 0x3456
#define UPDATE_BOOTLOADER_FLAG 0x8765
#define BOOTLOADER_BACKUP_FLASH_START_ADDR	0x10032000//FlexNVM 200KB start	//1228800	//1048576
#define BOOTLOADER_FLASH_MAX_BLOCK_NUM 50	//4k*50 = 200K

#define BOOTLOADER_BIN_FILE_MAX_LEN 200*1024

#define UPDATER_VERSION UPDATE_BOOTLOADER_FLAG
#define BOOTLOADER_FLASH_START_ADDR 0
#define APP_FLASH_START_ADDR 0x32000

#define UPDATE_SYS_IPC_RX_BUFF_LEN 256
#define FLASH_MINI_BLOCK_SIZE 4096

#define CRC_VALUE_BYTE_SIZE 2
#define DATA_MAX_SIZE_PER_FRAME 64

#define RESTORE_BOOTLOADER_MAX_COUNTER 3

//hyl add
#define SYSTEM_TASK_ID_POWERMODE	SYSTEM_TASK_ID_POWERMODING
//#define IPC_CHANNEL_DIAG	        IPC_GW_CHANNEL_DIAG_IVI
#define IPC_CHANNEL_CANAPP	        IPC_GW_CHANNEL_CANAPP
#define IPC_CHANNEL_AUDIO	        IPC_GW_CHANNEL_AUDIO
#define IPC_CHANNEL_GENERAL	        IPC_GW_CHANNEL_AUDIO
#define IPC_CHANNEL_KEY	            IPC_GW_CHANNEL_KEYSERVICE
#define IPC_CHANNEL_SWDL	        IPC_GW_CHANNEL_SWDL

#define IVI_IPC_UPDATE_SID_ECU_RESET     		         SID_ECU_RESET
#define IVI_IPC_UPDATE_SID_WRITE_DATA_BY_DID             SID_WRITE_DATA_BY_DID
#define IVI_IPC_UPDATE_SID_ROUTINE_CONTROL               SID_ROUTINE_CONTROL
#define IVI_IPC_UPDATE_SID_REQUEST_DOWNLOAD              SID_REQUEST_DOWNLOAD
#define IVI_IPC_UPDATE_SID_TRANSFER_DATA 	             SID_TRANSFER_DATA
#define IVI_IPC_UPDATE_SID_REQUEST_TRANSFER_EXIT 		 SID_REQUEST_TRANSFER_EXIT
#define IVI_IPC_UPDATE_SID_READ_DATA_BY_DID  	         SID_READ_DATA_BY_DID

#define IPC_SW_SYSTEM_FUCTION_UPDATE_READ_DID            0x06
#define SYS_CUR_LVI	   780U 
#define SYS_CUR_HVI	   1680U 
#define SYSUPDATE_IPC_TIMEOUT    (30U*1000U)
#define UPDATE_SYS_DUBUG 			        STD_OFF
#define UPDATE_BOOTLOADER_FEATURE 			STD_ON

typedef enum{
	BACKUP_SYS_RET_NONE,
	BACKUP_SYS_RET_OK,
	BACKUP_SYS_RET_NOT_OK,
}tBackupSYSResult;

typedef enum{
	RESTORE_SYS_RET_NONE,
	RESTORE_SYS_RET_OK,
	RESTORE_SYS_RET_NOT_OK,
}tRestoreSysResult;


#if (UPDATER_VERSION == UPDATE_APP_FLAG)
typedef enum{
	SID_ECU_RESET = 0x11,
	SID_WRITE_DATA_BY_DID = 0x2E,
	SID_ROUTINE_CONTROL = 0x31,
	SID_REQUEST_DOWNLOAD = 0x34,
	SID_TRANSFER_DATA = 0x36,
	SID_REQUEST_TRANSFER_EXIT = 0x37,
}tSidType;


typedef enum{
	NRC_GENERAL_REJECT = 0x10,
	NRC_SERVICE_NOT_SUPPORTED = 0x11,
	NRC_SUB_FUNCTION_NOT_SUPPORTED = 0x12,
	NRC_INCORRECT_MESSAGE_LENGTH = 0x13,
	NRC_RESPONSE_TOO_LONG = 0x14,
	NRC_BUSY_REPEAT_REQ = 0x21,
	NRC_CONDITION_NOT_CORRECT = 0x22,
	NRC_REQUEST_SEQUENCE_ERROR = 0x24,
	NRC_REQUEST_OUT_OF_RANGE = 0x31,
	NRC_SECURITY_ACCESS_REQUEST = 0x33,
	NRC_INVALID_KEY = 0x35,
	NRC_EXCEED_NUMBER_OF_ATTEMPTS = 0x36,
	NRC_REQUIRED_TIME_DELAY_NOT_EXPIRED = 0x37,
	NRC_UPLOAD_DOWNLOAD_NOT_ACCEPTED = 0x70,
	NRC_TRANSFER_DATA_SUSPENDED = 0x71,
	NRC_GENERAL_PROGRAMMING_FAILURE = 0x72,
	NRC_WRONG_BLOCK_SEQ_COUNTER = 0x73,
	NRC_RESPONSE_PENDING = 0x78,
	NRC_SUB_FUNCTION_NOT_SUPPORTED_IN_ACTIVE_SESSION = 0x7E,
	NRC_SERVICE_NOT_SUPPORED_IN_ACTIVE_SESSION = 0x7F,
	NRC_VOLTAGE_TOO_HIGH = 0x92,
	NRC_VOLTAGE_TOO_LOW = 0x93,
	NRC_STOP_PROCESS = 0xfe,//due to internl error,process needs to be stopped
	NRC_NONE = 0xff//positive resp
}tUdsNRCType;

typedef enum {
	IPC_CHANNEL_POWERMODING = 5,
	IPC_CHANNEL_DIAG = 6,
    IPC_CHANNEL_CANAPP = 7,
	IPC_CHANNEL_AUDIO = 8,
	IPC_CHANNEL_GENERAL = 9,
	IPC_SYS_INFOR = 10,
	IPC_CHANNEL_KEY = 11,
	IPC_CHANNEL_STORE = 14,
	IPC_CHANNEL_SWDL = 15
} tUartIPCChannelID;

#endif

typedef enum{
	SYS_APP_STATUS = 0x00,
	SYS_USB_SWDL_STATUS=0x01,
	SYS_MFG_SWDL_STATUS=0x02
}SysStatus;

extern uint16 g_sUpdateSysCurFunctionID;


extern void updateSys_Init();
extern void updateSys_Loop();
extern uint16 updateSys_GetStatus();
extern void updateSys_IPCCallback(uint16 function, uint8 *rx_data, uint32 len);
#endif
