#coding=utf-8

#import xx 与 from xx import yy 区别：
#使用import xx 可以修改模块对象的属性（无论属性是不是可变类型）
#使用from xx import yy 只能修改模块对象的属性是可变类型的（不可变类型不能修改,会发生属性错误）

#tkinter的使用：
#1、https://blog.csdn.net/mingshao104/article/details/79591965
#2、https://blog.csdn.net/sinat_41104353/article/details/79313424
#3、https://www.cnblogs.com/xiehy/p/10826495.html
#4、https://www.jb51.net/article/119817.htm 子窗口
#5、https://www.cnblogs.com/yibeimingyue/p/9362511.html 菜单
import re
import os                               #系统相关，如文件路径
import datetime                         #系统相关，如当前时间
import socket                           #系统相关，如计算机名
import tkinter as tk                    #tkinter 窗口
import shutil
import serial                           #导入串口模块
import serial.tools.list_ports
from tkinter import ttk
from tkinter import messagebox          #弹窗库导入消息盒子模块
from tkinter import scrolledtext        # 导入滚动文本框的模块
from threading import Timer             #导入定时器模块
from tkinter import  *
from tkinter import filedialog

#===========================================《system》===========================================
#=========================================== 系统相关 ===========================================
#===========================================《system》===========================================
curHostName = socket.gethostname()#获取计算机名字
print(curHostName)
curSysTime = datetime.datetime.now().strftime('%F %T')#获取当前系统时间 字符类型 str
print(curSysTime)
curPyDirect = os.getcwd()#获取当前fileOperation.py的路径
print(curPyDirect)

#===========================================《variable》===========================================
#=========================================== 自定义变量 ===========================================
#===========================================《variable》===========================================
x_position = 0
y_position = 0

#===========================================《window》===========================================
#===========================================   窗口   ===========================================
#===========================================《window》===========================================
window=tk.Tk()
window.title('my window')#窗口名字
window.geometry('1200x600')#窗口大小

# ===========================================《Menu》===========================================
# ===========================================  菜单  ===========================================
# ===========================================《Menu》===========================================
# ===========================================《Menu》 1st：指定一个菜单项，类似于导航栏,顶层菜单
menubar = tk.Menu(window)  # 指定tkinter菜单

def File_New_Event():
    fname = filedialog.askopenfilename(
        filetypes=(("Text file", "*.txt*"), ("DBC file", "*.dbc*"), ("HTML files", "*.html;*.htm")))

def File_Open_Event():
    global curHostName
    # FolderPath = filedialog.askdirectory()#打开提示框，选则文件夹，输出文件夹绝对路径
    FilePath = filedialog.askopenfilename(filetypes=(
    ("DBC file", "*.dbc*"), ("Text file", "*.txt*"), ("HTML files", "*.html;*.htm")))  # 打开提示框，选则文件，输出文件绝对路径

    fp = open(FilePath, 'w')
    # fp.truncate()  # 清空文件
    l_note = []
    curSysTime = datetime.datetime.now().strftime('%F %T')  # 获取当前系统时间 字符类型 str
    l_note.append('/* Warning : Please don\'t modify this file,this is generated by tools */')
    l_note.append('/************************************************************************')
    l_note.append('*File Name   :123.dbc')
    l_note.append('*Version     :' + 'V1.0')
    l_note.append('*Author      :' + curHostName)
    l_note.append('*Time        :' + datetime.datetime.now().strftime('%F %T'))
    l_note.append('*Description :')
    l_note.append('*/')
    s = '\n'.join(l_note)
    fp.write(s)  # 写入时间
    fp.close()  # 关闭文件

    # ==1st:查找当前路径下是否存在：名为Gen的文件夹
    global curPyDirect
    delDirect = curPyDirect + "\Gen"
    print(delDirect)
    if os.path.isdir(delDirect) == True:  # 存在
        # os.rmdir(delDirect)#删除空文件夹
        shutil.rmtree(delDirect)  # 删除非空文件夹
        print('Delete current direct Gen Floder success!!\r\n')
    else:
        print('Not contain floder at current direct named: Gen\r\n')
    # ==2nd：创建菜单栏在当前路径下创建：名为Gen的文件夹
    os.makedirs(delDirect)
    print('Create Floder named Gen success at ', curPyDirect, ' \r\n')

    # ==3rd:添加文件new.txt
    fileName = delDirect + "\\new.txt"
    file = open(fileName, 'w')
    file.truncate()  # 清空文件
    file.write("123")
    file.close()
    print('Create File named new.txt success at ', delDirect, ' \r\n')


def File_Save_Event():
    fname = filedialog.askopenfilename(filetypes=(("Text file", "*.txt*"), ("HTML files", "*.html;*.htm")))

def File_SaveAs_Event():
    fname = filedialog.askopenfilename(filetypes=(("Text file", "*.txt*"), ("HTML files", "*.html;*.htm")))

def About_Version_Event():
    messagebox.showinfo('当前版本', sys.version)

# ===========================================《Menu》 2nd：创建菜单栏
# =================第1个菜单项：
fmenu1 = tk.Menu(window)
fmenu1.add_command(label='新建', command=None)
fmenu1.add_command(label='打开', command=File_Open_Event)
fmenu1.add_command(label='保存', command=None)
fmenu1.add_command(label='另存为', command=None)

# =================第2个菜单项：
fmenu2 = tk.Menu(window)
for item in ['复制', '粘贴', '剪切']:
    fmenu2.add_command(label=item)

# =================第3个菜单项：
fmenu3 = tk.Menu(window)
for item in ['默认视图', '新式视图']:
    fmenu3.add_command(label=item)

# =================第4个菜单项：
fmenu4 = tk.Menu(window)
fmenu4.add_command(label='版权信息', command=About_Version_Event)
fmenu4.add_command(label='其他说明', command=None)

# ===========================================《Menu》 3rd：级联菜单栏
# add_cascade 的一个很重要的属性就是 menu 属性，它指明了要把那个菜单级联到该菜单项上，
# 当然，还必不可少的就是 label 属性，用于指定该菜单项的名称
menubar.add_cascade(label="文件", menu=fmenu1)  # 菜单项：文件
menubar.add_cascade(label="编辑", menu=fmenu2)  # 菜单项：编辑
menubar.add_cascade(label="视图", menu=fmenu3)  # 菜单项：视图
menubar.add_cascade(label="关于", menu=fmenu4)  # 菜单项：关于

# ===========================================《Menu》 4th：激活菜单
# 最后可以用窗口的 menu 属性指定我们使用哪一个作为它的顶层菜单
window.config(menu=menubar)


#===========================================《Label》===========================================
#=========================================== 文本框  ===========================================
#===========================================《Label》===========================================
#===========================================Label：变量
Label_A_var = tk.StringVar()#这是文字变量储存器
#===========================================Label：创建
Label_A = tk.Label(window,
                    text="Radiobutton A",#默认值
                    textvariable=Label_A_var,# 使用 textvariable 替换 text, 因为这个可以变化
                    bg='green', font=('Arial', 12), width=35, height=2)#背景色 字体大小，长，宽
#===========================================Label：加载
Label_A.pack()
#===========================================Label：位置调整
Label_A.place(x=x_position,y=y_position)

#===========================================《Label》:文本框===========================================
x_position += 50
y_position += 50
g_Lable = tk.Label(window, text="网站名")
g_Lable.pack()
g_Lable.place(x=x_position,y=y_position)

#===========================================《Button》===========================================
#===========================================   按键   ===========================================
#===========================================《Button》===========================================
#===========================================Button：全局变量
global_val = False  #定义一个变量，默认 False
#===========================================Button：事件执行
def Button_Tick_Event():
    global global_val#引用本Moulde的全局变量
    if global_val == False:
        global_val = True
        Label_A_var.set('you tick me')#设置标签的文字为 'you tick me'
    else:
        global_val = False
        Label_A_var.set('') #设置文字为空
#===========================================Button：创建
Button_A = tk.Button(window,
    text='Button A',#显示在按钮上的文字
    width=15, height=2,#按钮大小
    command=Button_Tick_Event)#点击按钮式执行的命令
#===========================================Button：加载
Button_A.pack()
#===========================================Button：位置调整
x_position+=50
y_position+=50
Button_A.place(x=x_position,y=y_position)

#===========================================《Radiobutton》===========================================
#===========================================    圆形按键   ===========================================
#===========================================《Radiobutton》===========================================
#===========================================构造一个Radiobutton所需变量
x_position+=100
y_position+=100
you_like_language=[('python',0),('C',1),('C++',2),('Java',3)]
mutualIntVar = tk.IntVar()

#===========================================Radiobutton：事件执行
def you_like_language_fun():
    Label_A_var.set('you like language is : '+you_like_language[mutualIntVar.get()][0])

#===========================================Radiobutton：创建
for l_text,l_value in you_like_language:
    Radiobutton_G = tk.Radiobutton(window, text=l_text, value=l_value, variable=mutualIntVar, command=you_like_language_fun)
    Radiobutton_G.pack()
    Radiobutton_G.place(x=x_position,y=y_position)  # 位置调整x y 坐标
    y_position+=20
you_like_language_fun()

#===========================================《Checkbutton》===========================================
#===========================================    方形按键   ===========================================
#===========================================《Checkbutton》===========================================
#===========================================构造一个Checkbutton所需变量
Checkbutton_A_Var = tk.IntVar()
Checkbutton_B_Var = tk.IntVar()
#===========================================Checkbutton：事件执行
def Checkbutton_Event():
    print('you have selected a',Checkbutton_A_Var.get())

#===========================================Checkbutton：创建
Checkbutton_A = tk.Checkbutton(window,text = "Checkbutton A",variable = Checkbutton_A_Var,command=Checkbutton_Event(),
                    onvalue = 1, offvalue = 0)
Checkbutton_A.pack()
y_position += 20
Checkbutton_A.place(x=x_position,y=y_position)#位置调整x y 坐标

Checkbutton_B = tk.Checkbutton(window,text = "Checkbutton B",variable = Checkbutton_B_Var,command=Checkbutton_Event(),
                    onvalue = 1, offvalue = 0)
Checkbutton_B.pack()
y_position += 20
Checkbutton_B.place(x=x_position,y=y_position)#位置调整x y 坐标


#===========================================《ComBox》===========================================
#=========================================== 下拉列表 ===========================================
#===========================================《ComBox》===========================================
def go(*args):   #处理事件，*args表示可变参数
    print(comboxlist.get()) #打印选中的值

comvalue=tk.StringVar()#窗体自带的文本，新建一个值
comboxlist=ttk.Combobox(window,textvariable=comvalue) #初始化
comboxlist["values"]=("北京","上海","广州")
comboxlist.current(0)#选择第一个
comboxlist.bind("<<ComboboxSelected>>",go)#绑定事件,(下拉列表框被选中时，绑定go()函数)
comboxlist.pack()
comboxlist.place(x=x_position,y=x_position)



#===========================================《ScrolledText》===========================================
#===========================================   滚动文本框    ==========================================
#===========================================《ScrolledText》===========================================
scr = scrolledtext.ScrolledText(window, width=70, height=13,font=("隶书",11))  #滚动文本框（宽，高（这里的高应该是以行数为单位），字体样式）
x_position+=50
y_position+=50
scr.place(x=x_position, y=y_position) #滚动文本框在页面的位置


#===========================================《Timer》===========================================
#===========================================  定时器 ===========================================
#===========================================《Timer》===========================================
# class test:
#     def __init__(self):
#         self.g_timer = Timer(1, self.func)
#         self.g_timer.start()
#
#     def func(self):
#         #ch = ser.readlines()  # 只收一个bytes
#         #print(ch.decode(encoding='ascii'), end='')
#         print("ni hao")
#         self.g_timer.cancel()
#         self.g_timer = Timer(1, self.func)
#         self.g_timer.start()
#         scr.insert(END,datetime.datetime.now().strftime('%F %T %S')+" ni hao \r\n")
# g_timer = test()

def g_timer_fun():
    scr.insert(END, datetime.datetime.now().strftime('%F %T %S')  +" ni hao \r\n")
    g_timer = Timer(1, g_timer_fun)
    g_timer.start()
g_timer = Timer(1, g_timer_fun)
g_timer.start()


#===========================================《window》:激活窗口===========================================
#===========================================《window》:激活窗口===========================================
#===========================================《window》:激活窗口===========================================
#==定义关闭窗口时的提示
def window_closing():
    if messagebox.askokcancel("Quit", "Do you want to quit?"):
        window.destroy()
window.protocol("WM_DELETE_WINDOW", window_closing)
window.mainloop()#让窗口活起来 程序阻塞在此
